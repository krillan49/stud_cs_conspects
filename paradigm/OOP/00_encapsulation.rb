puts '                                           Инкапсуляция'

#  !!! Потом сопоставить с тем что об инкапсуляции есть в основном фаиле !!!


# Виртуальные переменные класса и скрытая функциональность.

# Инкапсуляция (encapsulation) - относится к объединению данных с методами, которые работают с этими данными, или к ограничению прямого доступа к некоторым компонентам объекта. Инкапсуляция используется для сокрытия значений или состояния объекта структурированных данных внутри класса, предотвращая прямой доступ к ним клиентов таким образом, чтобы это могло раскрыть скрытые детали реализации или нарушить инвариантность состояния, поддерживаемую методами.

# Скрывая разницу между переменными экземпляра и вычисляемыми значениями, вы защищаете остальной мир от реализации вашего класса. Вы можете свободно изменять то, как все работает в будущем, не влияя на миллионы строк кода, которые используют ваш класс.

class Song
  attr_reader :duration

  def initialize(duration)
    @duration = duration
  end

  #Методы доступа к атрибутам не обязательно должны быть просто оболочками вокруг переменных экземпляра объекта. Например, вы можете получить доступ к продолжительности в минутах и долях минуты, а не в секундах, как мы это делали.
  def duration_in_minutes
    @duration/60.0   # не меняя или добавляя новую переменную вводим новую функциональность(создание виртуальной переменной экземпляра). Для пользователя продолжительность в минутах кажется таким же атрибутом, как и любой другой. Однако внутри нет соответствующей переменной экземпляра.
  end
  def duration_in_minutes=(value)
    @duration = (value * 60).to_i
  end

end

aSong = Song.new(260)
aSong.duration_in_minutes       #=> 4.283333333333333
aSong.duration_in_minutes = 4.2
aSong.duration                  #=> 252














#
