puts '                                           SSH-ключи'

# SSH ключ - это более безопасный способ аутентификации при подключении к удаленному серверу по протоколу SSH (Secure Shell), чем использование пароля

# SSH ключ состоит из 2х фаилов, один из которых хранится у нас на компьютере (приватный ключ), а 2й передается серверу (публичный ключ), чтобы он мог идентифицировать

# При подключении к серверу, наш SSH клиент использует приватный ключ для создания цифровой подписи. Сервер, имея наш публичный ключ, может проверить эту подпись и авторизует запроса пароля.

# Преимущества SSH ключей:
# Намного сложнее взломать SSH ключ, чем угадать пароль
# Не нужно вводить пароль при каждом подключении.
# Позволяют автоматизировать задачи, такие как скрипты резервного копирования или развертывания.



puts '                                        Генерация SSH-ключа'

# https://www.youtube.com/watch?v=QF4ZF857m44    (1-05-20)    про генерерацию SSH-ключей
# https://www.youtube.com/watch?v=dEg0gsxd3U8    тоже про генерацию SSH-ключей

# На Мак и Линукс уже стоят утилиты для генерации SSH-ключей, для Виндоус можно воспользоваться встроенной утилитой от Git, тоесть воспользоваться Git Bash терминал, в который встроена утилита для генерации SSH-ключей

# /home/user/.ssh/id_rsa    - директория по умолчанию на Линукс и Мак
# /с/Users/user/.ssh/id_rsa - директория по умолчанию на Виндоус


# 1. Используйте команду `ssh-keygen`, которая запустит процесс генерации ключа
# $ ssh-keygen

# 2. Терминал спросит, где сохранить ключи. По умолчанию предлагается директория `~/.ssh/id_rsa`.  Если вы хотите использовать другое имя файла, введите его
#=>
# Generating public/private rsa key pair.
# Enter file in which to save the key (/home/user/.ssh/id_rsa):

# 3. Задайте парольную фразу (passphrase) (Рекомендуется!). Это дополнительный уровень защиты, если кто-то получит доступ к приватному ключу, ему все равно понадобится парольная фраза для его использования. Чтобы использовать парольную фразу, нужно ввести ее дважды или можно не использовать парольную фразу и просто нажать `Enter` дважды.
#=>
# Enter passphrase (empty for no passphrase):
# Enter same passphrase again:

# 4. После ввода парольной фразы (или ее пропуска) ключи будут сгенерированы
#=>
# Your identification has been saved in /home/user/.ssh/id_rsa
# Your public key has been saved in /home/user/.ssh/id_rsa.pub
# The key fingerprint is:
# SHA256:R8f9+KxR1o0iS+t7l3vVwU9j2yQxN1wZz2B6b8c9d4 user@hostname
# The key's randomart image is:
# +---[RSA 3072]----+
# |          .oo.   |
# |         .  o..  |
# |        . ..+..  |
# |       o.o.B o   |
# |      .S o.E .   |
# |     . . o. .    |
# |    o . +        |
# |   o =o..        |
# |  o+=. o         |
# +----[SHA256]-----+

# 5. Далее нужно скопировать свой публичный ключ на удаленный сервер, к которому нужо подключиться. Ключи хранятся по выбранному пути, например `~/.ssh/id_rsa` (приватный) и `~/.ssh/id_rsa.pub` (публичный). Эти фаилы можно открыть например в IDE, чтобы скопировать ключ, копируем все вместе с началом и названием компа в конце



puts '                               Генерация ключей в своих директориях'

# (!!! были проблемы с доступом на Гитхаб, мб так лучше не делать)

# 1. Переходим (создаем если его нет) в скрытый каталог ".ssh" в домашнем катаоге
# $ cd .ssh

# 2. Создадим отделдьную директорию в .ssh для каждого проекта в котором нужны SSH-ключи и переходим в нее
# $ cd some-project

# 3. Генерируем SSH-ключ. (пофиг что там пишет путь по умолчанию создаст в этой директории) Там попросит ввести имя для ключа, назовем например some (будет создано some и some.pub)
# $ ssh-keygen

# 4. Посмотрим (и скопируем если надо передать куда-то) публичный ключ, что сгенерился в фаиле some.pub
# $ cat some.pub



puts '                                            Доп опции'

# -C   - флаг команды `ssh-keygen`, чтобы при генерации ключей SSH добавить комментарий в публичный ключ, по умолчанию комментарием будет имя хоста, а можно вместо него добавить например email
# GitHub, GitLab, Bitbucket и другие платформы для контроля версий отображают этот email-адрес рядом с вашими коммитами, если вы настроите Git для использования этого же email. Это помогает другим идентифицировать вас как автора коммитов.

# $ ssh-keygen                          => ssh-rsa AAAAB3N...[длинная строка]... user@myhost
# $ ssh-keygen -C "user@example.com"    => ssh-rsa AAAAB3N...[длинная строка]... user@example.com



puts '                                       Алгоритмы шифрования'

# Стоит использовать последнюю версию OpenSSH, чтобы получить доступ к наиболее современным и безопасным алгоритмам

# `ssh-keygen` использует алгоритм по умолчанию, установленный в вашей системе OpenSSH. Алгоритм по умолчанию может отличаться в разных версиях OpenSSH и конфигурациях. В современных версиях OpenSSH алгоритмом по умолчанию часто является `ed25519`. В более старых версиях это мог быть `rsa`.
# Чтобы узнать алгоритм по умолчанию, можно посмотреть в конфигурационном файле OpenSSH (`/etc/ssh/ssh_config` или `~/.ssh/config`) параметр `PubkeyAcceptedKeyTypes`.  Или можно запустить `ssh-keygen` без параметров и посмотреть на вывод


# -t   - флаг команды `ssh-keygen`, чтобы явно указать какой будет использован алгоритм шифрования для генерации SSH-ключа, без него будет использвана кодировка по умолчанию
# $ ssh-keygen -t rsa              - создать SSH-ключ с кодировкой RSA


# ed25519, ecdsa - современные алгоритмы, они могут быть более безопасным и эффективными, чем RSA. Алгоритмы, отличные от RSA, часто используют меньший размер ключа для достижения той же степени безопасности. Например, ключ `ed25519` имеет фиксированный размер 256 бит, но обеспечивает более высокую безопасность, чем ключ RSA размером 2048 бит.

# RSA - это классический и широко используемый алгоритм асимметричного шифрования, часто используемый для SSH. RSA широко совместим с разными SSH клиентами и серверами. Без указания размера ключа, обычно генерирует ключ RSA размером по умолчанию 3072 бита (в современных версиях OpenSSH). Его стоит использовать если нужна максимальная совместимость с существующими SSH серверами и клиентами, особенно если вы не уверены, поддерживают ли они более современные алгоритмы. Не нужно использовать ключи RSA размером менее 2048 бит, так как они считаются устаревшими и менее безопасными


# -b    - флаг определяет количество бит для ключа RSA (?? только RSA или и других ??), который будет сгенерирован. Более длинные ключи обычно считаются более безопасными, так как их сложнее взломать. 4096 бит - это стандартная и рекомендуемая длина ключа для RSA в настоящее время.
# $ ssh-keygen -t rsa -b 4096         - создать RSA ключ длиной 4096 бит.
















#
