puts '                                               Big-O'

# Big O - это нотация, которая описывает время выполнения алгоритма или использование памяти в зависимости от объёма входных данных. Она помогает оценить, насколько быстро алгоритм работает при увеличении размера данных.

# Big O описывает худший случай, что важно для анализа производительности


# 1. O(1) Константное время/сложность - время выполнения не зависит от размера входных данных. Cколько бы элементов не было добавилено в структуру данных (например в хеш), поиск всегда будет занимать одно и то же время(сразу найдет нужное)

# 2. O(N) Линейное время/сложность - время выполнения увеличивается прямо пропорционально размеру данных. Для поиска элемента нам необходимо перебрать все элементы структуры данных. Например есть массив из 10 элементов и алгоритм работает с линейной сложностью, то при удвоении размера массива до 20 элементов время выполнения также удвоится

# 3. O(n²) Квадратичная сложность - время выполнения увеличивается пропорционально квадрату размера данных (например, пузырьковая сортировка)

# 4. O(log n) Логарифмическая сложность - время выполнения растет медленно по мере роста данных (например, бинарный поиск)

# 5. O(n log n) Линейно-логарифмическая сложность - например, быстрая сортировка

# 6. O(n!) Факториальная сложность - время выполнения растет как факториал от количества элементов (например, при решении задач перебора)



puts '                                            Типы данных'

#            |              Average             |            Worst
#            | Access Search Insertion Deletion | Access Search Insertion Deletion
# Array      | O(1)   O(n)     O(n)     O(n)    | O(1)   O(n)     O(n)     O(n)
# Hash Table |  –     O(1)     O(1)     O(1)    |  –     O(n)     O(n)     O(n)














#
