puts '                                         VT100 escape codes'

# https://learn.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences

# https://gist.github.com/delameter/b9772a0bf19032f977b985091f0eb5c1
# Тут описывается, как управлять терминалом VT100. Записи имеют вид "имя, описание, код выхода".
# Имя не важно, а описание нужно только для того, чтобы помочь вам найти то, что вы ищете. Все, что вам нужно сделать, это отправить «код выхода» на экран. Эти коды часто состоят из нескольких символов, но все они начинаются с ^[. Это не два символа ^ и [, а скорее представление кода ASCII ESC(поэтому они и называются кодами выхода).

# ESC имеет десятичное значение 27 и должен быть отправлен перед остальной частью кода, которая представляет собой просто строку ASCII.



puts '                                        Совместимость/поддержка'

# Эти коды, как правило, работают в терминалах, которые поддерживают ANSI-управляющие последовательности:

# 1. Unix/Linux:
# bash, zsh, sh: На большинстве систем с этими оболочками и терминалами, которые поддерживают ANSI (например, xterm, GNOME Terminal, Terminator и т. д.), код будет работать.
# tmux и screen: Эти мультиплексоры терминала также поддерживают ANSI последовательности.

# 2. macOS терминал и другие аналогичные оконные менеджеры поддерживают ANSI-коды

# 3. Windows:
# Windows Terminal - Современные версии поддерживают ANSI-коды.
# WSL (Windows Subsystem for Linux): В терминалах WSL также поддерживаются ANSI коды.
# В старых версиях Windows Command Prompt (cmd) и PowerShell поддержку ANSI-кодов можно было включить, но она была ограничена.

# Некоторые терминалы могут не полностью поддерживать все функции ANSI-кодов, поэтому в зависимости от конфигурации и версии может быть разная совместимость.
# В некоторых случаях может потребоваться включить поддержку ANSI-управляющих последовательностей в настройках терминала.



puts '                                                Коды'

'\033[H'    # перемещает курсор в верхний левый угол терминала. (33 тут это 33 пустве строки?)

'\033[J'    # очищает экран от текущего курсора вниз.
"\e[2J"     # тоже самое (хз чем отличается e от 33)

"\e[H\e[2J" # комбинация 2х команд

"\x1bc"     # Escape-код отправляет управляющую последовательность, которая обычно используется для сброса терминала в начальное состояние, включая очистку экрана.



puts '                                         Примеры и реализации'

# https://stackoverflow.com/questions/48612106/windows-console-esc2j-doesnt-really-clear-the-screen
# ESC[2J на самом деле не "очищает" экран, а просто прокручивает вниз, чтобы "скрыть" напечатанное содержимое.
# Только ESC[H + ESC[J действительно "очищает" текущее отображаемое содержимое на экране. (Это ошибка или так и задумано?)

# ESC[2J  -  терминал прокрутится вверх и будет пустое место на высоту экрана
puts "\e[2J"    # так будет пустая строка вверху
print "\e[2J"   # а так не будет, тоесть так получше

# ESC[H + ESC[J  - тоже самое что и выше, но не будет пустого поля в высоту экрана, по идее должна очищать но (? почему то тоже прокручивает ?)
print "\e[H\e[2J" # Хитрый способ очистить экран

# А этот код команда уже нормально очищает именно (Довольно старая тема)
print "\x1bc"

















#
